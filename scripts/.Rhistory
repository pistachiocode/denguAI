reticulate::repl_python()
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import dengue_utils as dutils
import dsutils as du
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)
SAVE_PLOTS = False
import os
os.chdir("/Users/rocio/Dropbox/DataScience/dengAI/scripts")
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import dengue_utils as dutils
import dsutils as du
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)
SAVE_PLOTS = False
features_train = pd.read_csv(dutils.FEATURES_TRAIN_PATH)
labels_train   = pd.read_csv(dutils.LABELS_TRAIN_PATH)
features_test = pd.read_csv(dutils.FEATURES_TEST_PATH)
# Join of train features and labels features
train_dataset = features_train.merge(labels_train,
left_on=['city', 'year', 'weekofyear'],
right_on=['city', 'year', 'weekofyear'],
how='inner')
du.show_boxplot(train_dataset, exclude=['year'], figsize=(5,5))
du.show_boxplot(train_dataset, exclude=['year'], figsize=(5,5))
%matplotlib inline
train_dataset.boxplot()
fig = train_dataset.boxplot()
fig.show()
df = train_dataset
df.select_dtypes(exclude=['O'])
df.select_dtypes(exclude=['O']).columns
exclude=['total_cases']
df.select_dtypes(exclude=['O']).columns.drop(exclude)
features_boxplot = df.select_dtypes(exclude=['O']).columns
features_boxplot = features_boxplot.drop(exclude)
f, ax = plt.subplots(figsize=figsize)
figsize=(6, 8)
f, ax = plt.subplots(figsize=figsize)
sns.boxplot(data=df[features_boxplot], whis="range", palette="husl", orient="h")
plt.show()
import dengue_utils as dutils
import dsutils as du
# Conversion kelvin to celsius
train_dataset = dutils.temperature_conversion(train_dataset)
du.show_boxplot(train_dataset, exclude=['year'])
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import dengue_utils as dutils
import dsutils as du
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)
SAVE_PLOTS = False
# -------------------
# Init
# -------------------
%matplotlib inline
features_train = pd.read_csv(dutils.FEATURES_TRAIN_PATH)
labels_train   = pd.read_csv(dutils.LABELS_TRAIN_PATH)
features_test = pd.read_csv(dutils.FEATURES_TEST_PATH)
# Join of train features and labels features
train_dataset = features_train.merge(labels_train,
left_on=['city', 'year', 'weekofyear'],
right_on=['city', 'year', 'weekofyear'],
how='inner')
du.show_boxplot(train_dataset, exclude=['year'], figsize=(5,5))
du.show_boxplot(train_dataset, exclude=['year'], figsize=(5,5))
def show_boxplot(df, features=None, exclude=[], figsize=(6, 8)):
if features==None:
features = df.columns
features_boxplot = df.select_dtypes(exclude=['O']).columns
features_boxplot = features_boxplot.drop(exclude)
# Initialize the figure with a logarithmic x axis
f, ax = plt.subplots(figsize=figsize)
# Plot the orbital period with horizontal boxes
sns.boxplot(data=df[features_boxplot], whis="range", palette="husl", orient="h")
# Tweak the visual presentation
ax.xaxis.grid(True)
ax.set(ylabel="")
sns.despine(trim=True, left=True)
plt.show()
du.show_boxplot(train_dataset, exclude=['year'], figsize=(5,5))
